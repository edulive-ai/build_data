import openai
import base64
import os
import json
from pathlib import Path
from dotenv import load_dotenv

load_dotenv()
openai.api_key = os.getenv("OPENAI_API_KEY")

# === H√†m m√£ ho√° ·∫£nh base64 ===
def encode_image(image_path: str) -> str:
    with open(image_path, "rb") as img_file:
        return base64.b64encode(img_file.read()).decode('utf-8')

# === H√†m g·ªçi GPT: C√≥ th·ªÉ d√πng ·∫£nh ho·∫∑c ch·ªâ d√πng c√¢u h·ªèi ===
def generate_answer(question_text: str, image_path: str = None) -> str:
    print("üì§ ƒêang g·ª≠i y√™u c·∫ßu t·ªõi GPT...")
    messages = [
        {
            "role": "system",
            "content": "B·∫°n l√† m·ªôt gi√°o vi√™n To√°n ti·ªÉu h·ªçc, h√£y tr·∫£ l·ªùi ng·∫Øn g·ªçn, ch√≠nh x√°c. Kh√¥ng gi·∫£i th√≠ch, ch·ªâ n√™u ƒë√°p √°n."
        }
    ]

    user_content = []

    if image_path and Path(image_path).exists():
        base64_image = encode_image(image_path)
        user_content.append({"type": "text", "text": "H√£y ƒë·ªçc n·ªôi dung sau v√† ƒëi·ªÅn ƒë√°p √°n v√†o ch·ªó tr·ªëng:"})
        user_content.append({
            "type": "image_url",
            "image_url": {
                "url": f"data:image/png;base64,{base64_image}"
            }
        })

    # Lu√¥n g·ª≠i th√™m c√¢u h·ªèi vƒÉn b·∫£n n·∫øu c√≥
    if question_text:
        user_content.append({"type": "text", "text": f"C√¢u h·ªèi: {question_text}"})

    messages.append({
        "role": "user",
        "content": user_content
    })

    # G·ªçi API
    response = openai.ChatCompletion.create(
        model="gpt-4o",
        messages=messages,
        max_tokens=100,
        temperature=0.3,
    )

    answer = response.choices[0].message['content'].strip()
    return answer

# === X·ª≠ l√Ω dict ƒë·∫ßu v√†o ===
def process_question_entry(entry: dict, base_dir: str) -> dict:
    question_text = entry.get("question", "").strip()
    image_path = None

    if entry.get("image_question"):
        image_rel_path = entry["image_question"][0]
        # Lo·∫°i b·ªè 'books_cropped' kh·ªèi entry["book"] n·∫øu c√≥
        book_path = entry["book"]
        if book_path.startswith("books_cropped/"):
            book_path = book_path[len("books_cropped/"):]  # B·ªè ph·∫ßn 'books_cropped/'
        full_path = os.path.join(base_dir, book_path, image_rel_path)
        if Path(full_path).exists():
            image_path = full_path
        else:
            print(f"‚ö†Ô∏è ·∫¢nh kh√¥ng t·ªìn t·∫°i: {full_path}. S·∫Ω ch·ªâ d√πng c√¢u h·ªèi vƒÉn b·∫£n.")

    if not question_text and not image_path:
        print("‚ùå Kh√¥ng c√≥ d·ªØ li·ªáu ƒë·ªÉ g·ª≠i GPT.")
        return entry

    answer = generate_answer(question_text, image_path)
    entry["answer"] = answer
    print(f"‚úÖ ƒê√°p √°n GPT t·∫°o: {answer}")
    return entry

# === X·ª≠ l√Ω to√†n b·ªô file JSON ===
def process_json_file(input_json_path: str, output_json_path: str, base_dir: str) -> None:
    # ƒê·ªçc file JSON ƒë·∫ßu v√†o
    try:
        with open(input_json_path, 'r', encoding='utf-8') as f:
            data = json.load(f)
    except FileNotFoundError:
        print(f"‚ùå File JSON kh√¥ng t·ªìn t·∫°i: {input_json_path}")
        return
    except json.JSONDecodeError:
        print(f"‚ùå L·ªói ƒë·ªãnh d·∫°ng JSON trong file: {input_json_path}")
        return

    # Ki·ªÉm tra xem data c√≥ ph·∫£i l√† danh s√°ch
    if not isinstance(data, list):
        print("‚ùå File JSON ph·∫£i ch·ª©a m·ªôt danh s√°ch c√°c c√¢u h·ªèi.")
        return

    # X·ª≠ l√Ω t·ª´ng entry
    updated_data = []
    for entry in data:
        updated_entry = process_question_entry(entry, base_dir)
        updated_data.append(updated_entry)

    # L∆∞u k·∫øt qu·∫£ ra file JSON m·ªõi
    try:
        with open(output_json_path, 'w', encoding='utf-8') as f:
            json.dump(updated_data, f, ensure_ascii=False, indent=4)
        print(f"‚úÖ ƒê√£ l∆∞u k·∫øt qu·∫£ v√†o: {output_json_path}")
    except Exception as e:
        print(f"‚ùå L·ªói khi l∆∞u file JSON: {e}")

# === MAIN TEST ===
if __name__ == "__main__":
    BASE_IMAGE_FOLDER = "books_cropped"  # Th∆∞ m·ª•c ch·ª©a c√°c ·∫£nh
    INPUT_JSON_PATH = "books_cropped/30-de-thi-toan1/mapping.json"  # File JSON ƒë·∫ßu v√†o
    OUTPUT_JSON_PATH = "books_cropped/30-de-thi-toan1/mapping_answer.json"  # File JSON ƒë·∫ßu ra

    process_json_file(INPUT_JSON_PATH, OUTPUT_JSON_PATH, BASE_IMAGE_FOLDER)